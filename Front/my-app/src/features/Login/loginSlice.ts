import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { login, newLogin, refreshUser } from './loginAPI';
import IloginState from '../../model/Ilogin'
import jwt_decode from "jwt-decode";
import Ilogin from '../../model/Ilogin';
import { toast } from 'react-toastify';




const initialState: IloginState = {
  userName: '',
  password:'',
  email:'',
  logged: false,
  access: '',
  refresh: '',
  user_id:"",
  address:"",
  phone_number:"",
  age:0,
};


export const loginAsync = createAsyncThunk(
  'login/login',
    async (cred: any) => {
        const response = await login(cred);
        console.log(response)
        return response.data;
  }
  );
  export const refreshAsync = createAsyncThunk(
    'refresh/irefresh',
    async (refresh: any) => {
      console.log("here!",refresh)
      const response = await refreshUser(refresh);
      return response.data;
    }
  );

export const newLoginAsync = createAsyncThunk(
    'login/newLogin',
      async (cred: any) => {
          const response = await newLogin(cred);
          console.log(response)
          return response.data;
    }
);
export const loginSlice = createSlice({
  name: 'login',
  initialState,
  reducers: {
logout: (state) => {
  state.logged=false
  state.userName=""
  state.access=""
  state.refresh=""
},
},
// The `extraReducers` field lets the slice handle actions defined elsewhere,
// including actions generated by createAsyncThunk or in other slices.
extraReducers: (builder) => {
builder
  .addCase(loginAsync.fulfilled, (state, action) => {
  const decoded:any = jwt_decode(action.payload.access);
  state.logged=true
  // localStorage.setItem('refresh', action.payload.refresh)
  localStorage.setItem('access', action.payload.access)
  console.log(action.payload.access)
  state.userName=decoded.username
  state.user_id=decoded.user_id
  state.access=action.payload.access
  state.refresh=action.payload.refresh
  toast.success(`Welcome ${state.userName}`)
})
  .addCase(loginAsync.rejected, (state, action) => {
  toast.error('Password or Username Incorrect', {
  position: toast.POSITION.TOP_CENTER
  })
})
.addCase(refreshAsync.fulfilled, (state, action) => {
  console.log(action.payload)
  localStorage.setItem('refresh',action.payload.refresh)
  const tmp: any = jwt_decode(action.payload.access)
  state.userName = tmp.username
  state.user_id=tmp.user_id

  // { tmp.username == "admin" ? state.isAdmin = true : state.isAdmin = false }
})
  .addCase(newLoginAsync.fulfilled, (state, action) => {
  console.log(action.payload)
  state.logged=true
  state.userName=action.payload.username
  console.log(state.userName)
  toast.success(`Welcome ${state.userName}`)
})
.addCase(newLoginAsync.rejected, (state, action) => {
  toast.error('Password or Username Incorrect', {
  position: toast.POSITION.TOP_CENTER
  })
})
}
});

export const {logout } = loginSlice.actions;
export const selectUserName = (state: RootState) => state.login.userName;
export const selectLogged = (state: RootState) => state.login.logged;
export const selectAccess = (state: RootState) => state.login.access;
export const selectUser_id = (state: RootState) => state.login.user_id;


export default loginSlice.reducer;
